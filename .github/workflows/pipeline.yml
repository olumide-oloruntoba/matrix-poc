name: Using Matrix

env:
  PLATFORMS: ubuntu-latest,macos-latest,windows-latest


on:
  workflow_dispatch:
    inputs:
      # environment:
      #   description: 'Environment for deployment'
      #   type: choice
      #   required: true
      #   options: 
      #   - test
      #   - staging
      #   - prod

jobs:
  format_value:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Format Value
        id: format_value_step
        run: |
          # # type(${{ env.PLATFORMS }})
          # # PLATFORMS="${{ env.PLATFORMS }}"
          # # PLATFORMS="${PLATFORMS//\[/}"
          # # PLATFORMS="${PLATFORMS//\]/}"
          # # echo "Array Strings: $PLATFORMS"
          # # echo "::set-output name=formatted_platforms::${PLATFORMS}"

          # # type(${{ vars.O_LOCS }})
          # echo ${{ vars.O_LOCS }}
          # echo "::set-output name=formatted_platforms::${{ env.PLATFORMS }}"
          declare -a the_array=()
          IFS=', ' read -ra my_array <<< ${{ env.PLATFORMS }}
          # for element in "${my_array[@]}"; do
          #   echo "$element"
          #   the_array+=($element)
          # done
          # echo "Array Numbers: ${the_array[@]}"
          # Create a JSON object from the array elements
          jsonObject="{\"elements\": ["
          for ((i=0; i<${#my_array[@]}; i++)); do
            jsonObject+="\"${my_array[i]}\""
            if [[ $i -lt $(( ${#my_array[@]} - 1 )) ]]; then
              jsonObject+=","
            fi
          done
          jsonObject+="]}"
          echo "::set-output name=formatted_platforms::${jsonObject}"

          # elementCount=${#the_array[@]}
          # echo ${the_array[0]}
          # echo ${the_array[1]}
          # echo ${the_array[2]}
          # echo ${the_array[3]}
          # echo $elementCount
          # type(${the_array[@]})

      - name: Display
        run: |
          echo ${{ steps.format_value_step.outputs.formatted_platforms }}
    outputs:
      formatted_platforms: ${{ steps.format_value_step.outputs.formatted_platforms }}
  
  matrix_display:
    runs-on: ubuntu-latest
    needs: format_value
    # strategy:
    #   matrix:
    #     platform: ${{ fromJSON(needs.format_value.outputs.formatted_platforms) }}
    steps:
      - name: Display Matrix Value
        run: |
          echo ${{ needs.format_value.outputs.formatted_platforms }}

  matrix_job:
    runs-on: ubuntu-latest
    needs: matrix_display
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.format_value.outputs.formatted_platforms) }}
    steps:
      - name: Display Matrix Value
        run: |
          echo "Running on ${{ matrix.platform }}"
          echo "Running on ${{ needs.format_value.outputs.formatted_platforms }}"