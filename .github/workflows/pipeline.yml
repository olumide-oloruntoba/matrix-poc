name: Using Matrix

env:
  PLATFORMS: ubuntu-latest,macos-latest,windows-latest


on:
  workflow_dispatch:
    inputs:
      # environment:
      #   description: 'Environment for deployment'
      #   type: choice
      #   required: true
      #   options: 
      #   - test
      #   - staging
      #   - prod

jobs:
  format_value:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy Infrastructure
        uses: ./.github/actions/generate-matrix
        id: format_value
        with:
          other_locations: '${{ vars.O_LOCS }}'

    outputs:
      formatted_platforms: ${{ steps.format_value.outputs.formatted_platforms }}
  # format_value:
  #   runs-on: ubuntu-latest
  #   environment: prod
  #   steps:
  #     - name: Format Value
  #       id: format_value_step
  #       run: |
  #         declare -a the_array=()
  #         IFS=', ' read -ra my_array <<< ${{ vars.O_LOCS }}
  #         jsonObject="["
  #         for ((i=0; i<${#my_array[@]}; i++)); do
  #           jsonObject+="\"${my_array[i]}\""
  #           if [[ $i -lt $(( ${#my_array[@]} - 1 )) ]]; then
  #             jsonObject+=","
  #           fi
  #         done
  #         jsonObject+="]"
  #         echo "::set-output name=formatted_platforms::${jsonObject}"

  #     - name: Display
  #       run: |
  #         echo ${{ steps.format_value_step.outputs.formatted_platforms }}
  #   outputs:
  #     formatted_platforms: ${{ steps.format_value_step.outputs.formatted_platforms }}

  matrix_job:
    runs-on: ubuntu-latest
    needs: format_value
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.format_value.outputs.formatted_platforms) }}
    steps:
      - name: Display Matrix Value
        run: |
          echo "Running on ${{ matrix.platform }}"
          # echo "Running on ${{ needs.format_value.outputs.formatted_platforms }}"